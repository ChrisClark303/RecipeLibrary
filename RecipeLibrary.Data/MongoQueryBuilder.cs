using MongoDB.Bson;
using MongoDB.Driver;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Schema;

namespace RecipeLibrary.Data
{
    public class MongoQueryBuilder : IMongoQueryBuilder
    {
        private readonly List<BsonDocument> _documents = new List<BsonDocument>();

        public IMongoQueryBuilder WithAggregationGeoNear(double lng, double lat, string keyName, string distanceFieldName)
        {
            //Full disclosure: the aggregation syntax is not ideal, so this code was autogenerated from the MongoDb Aggregation builder front-end.
            var doc = new BsonDocument("$geoNear",
                new BsonDocument
                {
                    { "near", new BsonDocument
                        {
                            { "type", "Point" },
                            { "coordinates",
                            new BsonArray
                            {
                                lng,
                                lat
                            }}
                    }    },
                    { "key", keyName },
                    { "distanceField", distanceFieldName }
                });
            _documents.Add(doc);
            return this;
        }

        public IMongoQueryBuilder WithNotEqualQuery(string fieldName, string fieldValue)
        {
            var doc = new BsonDocument(fieldName, new BsonDocument("$ne", fieldValue));
            _documents.Add(doc);

            return this;
        }

        public IMongoQueryBuilder WithIsEqualToQuery(string fieldName, string fieldValue)
        {
            var doc = new BsonDocument(fieldName, fieldValue);
            _documents.Add(doc);

            return this;
        }

        public IMongoQueryBuilder WithAggregationProjection(string[] fieldsToProject, ProjectionType projectionType, bool excludeId = false)
        {
            var doc = new BsonDocument("$project", CreateProjectionDocument(fieldsToProject, projectionType, excludeId));
            _documents.Add(doc);
            return this;
        }

        public IMongoQueryBuilder WithAggregationLimit(int pageSize)
        {
            var doc = new BsonDocument("$limit", pageSize);
            _documents.Add(doc);
            return this;
        }

        public IMongoQueryBuilder WithAggregationSample(int sampleSize)
        {
            var sizeDoc = new BsonDocument("size", sampleSize);
            var sampleDoc = new BsonDocument("$sample", sizeDoc);
            _documents.Add(sampleDoc);

            return this;
        }

        public IMongoQueryBuilder WithProjection(string[] fieldsToProject, ProjectionType projectionType, bool excludeId = false)
        {
            var document = CreateProjectionDocument(fieldsToProject, projectionType, excludeId);
            _documents.Add(document);
            return this;
        }

        private BsonDocument CreateProjectionDocument(string[] fieldsToProject, ProjectionType projectionType, bool excludeId = false)
        {
            var projectedFieldDict = new Dictionary<string, int>(fieldsToProject.Select(f => new KeyValuePair<string, int>(f, (int)projectionType)));
            if (excludeId)
            {
                projectedFieldDict.Add("_id", 0);
            }
            return new BsonDocument(projectedFieldDict);
        }

        public PipelineDefinition<TIn, TOut> BuildPipeline<TIn, TOut>()
        {
            //Ensure the implicit cast from BsonDocument[] to PipelineDefinition is triggered
            PipelineDefinition<TIn, TOut> pipeline = Build();
            return pipeline;
        }

        public BsonDocument[] Build()
        {
            var documents = _documents.ToArray();
            //Reset the documents array in case it needs to be reused.
            _documents.Clear();
            return documents;
        }
    }

    public interface IMongoQueryBuilder
    {
        IMongoQueryBuilder WithAggregationGeoNear(double lng, double lat, string keyName, string distanceFieldName);
        IMongoQueryBuilder WithAggregationLimit(int pageSize);
        IMongoQueryBuilder WithNotEqualQuery(string fieldName, string fieldValue);
        IMongoQueryBuilder WithAggregationProjection(string[] fieldsToProject, ProjectionType projectionType, bool excludeId = false);
        IMongoQueryBuilder WithProjection(string[] fieldsToProject, ProjectionType projectionType, bool excludeId = false);
        IMongoQueryBuilder WithIsEqualToQuery(string fieldName, string fieldValue);
        BsonDocument[] Build();
        IMongoQueryBuilder WithAggregationSample(int sampleSize);
        PipelineDefinition<TIn, TOut> BuildPipeline<TIn, TOut>();
    }

    public enum ProjectionType
    {
        Exclude = 0,
        Include = 1
    }
}
